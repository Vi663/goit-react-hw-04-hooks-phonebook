{"version":3,"sources":["components/Filter/Filter.module.css","components/ContactList/ContactList.module.css","components/MainContainer/MainContainer.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.jsx","components/App/App.jsx","index.js","components/ContactForm/ContactForm.module.css"],"names":["module","exports","MainContainer","children","className","ContactForm","onSubmit","initialContact","name","number","useState","contact","setContact","handleChange","event","target","value","prevState","nameInputId","uuidv4","numberInputId","resetContact","s","autoComplete","e","preventDefault","htmlFor","ContactInput","type","id","onChange","pattern","title","required","ContactBtn","Filter","FilterLabel","FilterInput","ContactList","contacts","onDeleteContact","length","map","ContactItem","ContactName","ContactListNumber","onClick","App","JSON","parse","window","localStorage","getItem","setContacts","filter","setFilter","useEffect","setItem","stringify","data","find","toast","error","currentTarget","normalizedFilter","toLowerCase","includes","getVisibleContacts","contactId","theme","autoClose","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.59eab565.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"FilterLabel\":\"Filter_FilterLabel__1-1d4\",\"FilterInput\":\"Filter_FilterInput__5s_Wx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactList\":\"ContactList_ContactList__tQ2Iz\",\"ContactItem\":\"ContactList_ContactItem__3i_Sp\",\"ContactBtn\":\"ContactList_ContactBtn__14EM5\"};","export const MainContainer = ({ children }) => {\r\n  return (\r\n    <div className=\"mainContainer\">{children}</div>\r\n  )\r\n}","import React, { useState } from 'react';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport s from './ContactForm.module.css';\r\n\r\nexport function ContactForm ({onSubmit}) {\r\n  \r\n  const initialContact = {\r\n    name: \"\",\r\n    number: \"\",\r\n  };\r\n  \r\n  const [contact, setContact] = useState (initialContact);\r\n  const { name, number } = contact;\r\n\r\n  const handleChange = event => {\r\n    const { name, value } = event.target;\r\n    setContact((prevState) => ({\r\n      ...prevState, [name]: value\r\n    }))\r\n  };\r\n\r\n  const nameInputId = uuidv4();\r\n  const numberInputId = uuidv4();\r\n\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault()\r\n    onSubmit(contact)\r\n    resetContact()\r\n  }\r\n\r\n  const resetContact = () => {\r\n    setContact({ ...initialContact });\r\n  }\r\n\r\n  return (\r\n    <form className={s.ContactForm} autoComplete=\"on\" onSubmit={handleSubmit}>\r\n      <label htmlFor={nameInputId}>Name</label>\r\n      <input\r\n        className={s.ContactInput}\r\n        type=\"text\"\r\n        name=\"name\"\r\n        value={name}\r\n        id={nameInputId}\r\n        onChange={handleChange}\r\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n        required\r\n      />\r\n        \r\n      <label htmlFor={numberInputId}>Phone number</label>\r\n      <input\r\n        className={s.ContactInput}\r\n        type=\"tel\"\r\n        name=\"number\"\r\n        value={number}\r\n        id={numberInputId}\r\n        onChange={handleChange}\r\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n        title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n        required\r\n      />\r\n      <button className={s.ContactBtn}\r\n        type=\"submit\"\r\n        name=\"submit\">Add Contact\r\n      </button>\r\n    </form>\r\n  )\r\n}","import React from 'react';\r\nimport s from './Filter.module.css'\r\n\r\nexport const Filter = ({ value, onChange }) => (\r\n  <label className={s.FilterLabel}>\r\n    Find contacts by name\r\n    <input className={s.FilterInput} type=\"text\" value={value} onChange={onChange} />\r\n  </label>\r\n);\r\n\r\n","import React from 'react';\r\nimport s from './ContactList.module.css'\r\n\r\n\r\nexport function ContactList({ contacts, onDeleteContact }) {\r\n  return (\r\n    contacts.length === 0 ?\r\n      <p className={s.ContactList}>There are no contacts yet</p>\r\n      : <ul className={s.ContactList}>\r\n      {contacts.map(({ id, name, number }) => (\r\n        <li key={id} className={s.ContactItem}>\r\n          <span className={s.ContactName}>{name} </span>\r\n          <span className={s.ContactListNumber}>{number}</span>\r\n          <button\r\n            type=\"button\"\r\n            className={s.ContactBtn}\r\n            onClick={() => onDeleteContact(id)}\r\n          >\r\n            Delete\r\n          </button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  )\r\n}","import React, { useState, useEffect } from 'react';\nimport { ToastContainer, toast } from 'react-toastify';\nimport { v4 as uuidv4 } from 'uuid';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { MainContainer } from \"../MainContainer/MainContainer\";\nimport { ContactForm } from \"../ContactForm/ContactForm\";\nimport { Filter } from \"../Filter/Filter\";\nimport { ContactList } from \"../ContactList/ContactList\";\n\n\nexport function App() {\n  \n  const [contacts, setContacts] = useState(() => {\n    return JSON.parse(window.localStorage.getItem('contacts'))\n  })\n  const [filter, setFilter] = useState('')\n\n\n  const formSubmitHandler = (data) => {\n    const found = contacts.find((contact) => contact.name === data.name || contact.number === data.number);\n     \n    if (!found) {\n      setContacts((prevState) => ([...prevState, { id: uuidv4(), ...data }]))\n    } else {\n      toast.error(`This name or number is already in contacts`)\n    }\n  }\n  useEffect(() => {\n    window.localStorage.setItem('contacts', JSON.stringify(contacts))\n  }, [contacts])\n\n  useEffect(() => {\n    setContacts(JSON.parse(window.localStorage.getItem('contacts')))\n  }, [])\n\n  const findByName = e => {\n    setFilter(e.currentTarget.value);\n  };\n\n  const getVisibleContacts = () => {\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  };\n\n  const deleteContact = contactId => {\n    setContacts(prevState => (prevState.filter(contact => (contact.id !== contactId))))\n  };\n\n  return (\n    <MainContainer>\n      <h1>Phonebook</h1>\n      <ContactForm\n        onSubmit={formSubmitHandler}\n      />\n      <Filter\n        value={filter}\n        onChange={findByName}\n      />\n      <ContactList\n        contacts={getVisibleContacts()}\n        onDeleteContact={deleteContact}\n      />\n      <ToastContainer theme=\"colored\" autoClose={3000} />\n    </MainContainer>\n  )\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {App} from './components/App/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactForm\":\"ContactForm_ContactForm__26Ah0\",\"ContactInput\":\"ContactForm_ContactInput__3QF8a\",\"ContactBtn\":\"ContactForm_ContactBtn__2Jm5M\"};"],"sourceRoot":""}